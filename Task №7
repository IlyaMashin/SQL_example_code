Условие:
Для каждого дня в таблицах orders и courier_actions рассчитайте следующие показатели:
-Выручку, полученную в этот день.
-Затраты, образовавшиеся в этот день.
-Сумму НДС с продажи товаров в этот день.
-Валовую прибыль в этот день (выручка за вычетом затрат и НДС).
-Суммарную выручку на текущий день.
-Суммарные затраты на текущий день.
-Суммарный НДС на текущий день.
-Суммарную валовую прибыль на текущий день.
-Долю валовой прибыли в выручке за этот день (долю п.4 в п.1).
-Долю суммарной валовой прибыли в суммарной выручке на текущий день (долю п.8 в п.5).

Колонки с показателями назовите соответственно revenue, costs, tax, gross_profit, total_revenue, total_costs, total_tax, total_gross_profit, gross_profit_ratio, total_gross_profit_ratio
Колонку с датами назовите date.

Долю валовой прибыли в выручке необходимо выразить в процентах, округлив значения до двух знаков после запятой.
Результат должен быть отсортирован по возрастанию даты.
Поля в результирующей таблице: date, revenue, costs, tax, gross_profit, total_revenue, total_costs, total_tax, total_gross_profit, gross_profit_ratio,total_gross_profit_ratio
Чтобы посчитать затраты, в этой задаче введём дополнительные условия.
В упрощённом виде затраты нашего сервиса будем считать как сумму постоянных и переменных издержек. К постоянным издержкам отнесём аренду складских помещений, а к переменным — стоимость сборки и доставки заказа. Таким образом, переменные затраты будут напрямую зависеть от числа заказов.
Из данных, которые нам предоставил финансовый отдел, известно, что в августе 2022 года постоянные затраты составляли 120 000 рублей в день. Однако уже в сентябре нашему сервису потребовались дополнительные помещения, и поэтому постоянные затраты возросли до 150 000 рублей в день.
Также известно, что в августе 2022 года сборка одного заказа обходилась нам в 140 рублей, при этом курьерам мы платили по 150 рублей за один доставленный заказ и ещё 400 рублей ежедневно в качестве бонуса, если курьер доставлял не менее 5 заказов в день. В сентябре продакт-менеджерам удалось снизить затраты на сборку заказа до 115 рублей, но при этом пришлось повысить бонусную выплату за доставку 5 и более заказов до 500 рублей, чтобы обеспечить более конкурентоспособные условия труда. При этом в сентябре выплата курьерам за один доставленный заказ осталась неизменной.

Пояснение: 
При расчёте переменных затрат учитывайте следующие условия:
1. Затраты на сборку учитываются в том же дне, когда был оформлен заказ. Сборка отменённых заказов не производится.
2. Выплата курьерам за доставленный заказ начисляется сразу же после его доставки, поэтому если курьер доставит заказ на следующий день, то и выплата будет учтена в следующем дне.
3. Для получения бонусной выплаты курьерам необходимо доставить не менее 5 заказов в течение одного дня, поэтому если курьер примет 5 заказов в течение дня, но последний из них доставит после полуночи, бонусную выплату он не получит.
При расчёте НДС учитывайте, что для некоторых товаров налог составляет 10%, а не 20%. Список товаров со сниженным НДС:
['сахар', 'сухарики', 'сушки', 'семечки', 
'масло льняное', 'виноград', 'масло оливковое', 
'арбуз', 'батон', 'йогурт', 'сливки', 'гречка', 
'овсянка', 'макароны', 'баранина', 'апельсины', 
'бублики', 'хлеб', 'горох', 'сметана', 'рыба копченая', 
'мука', 'шпроты', 'сосиски', 'свинина', 'рис', 
'масло кунжутное', 'сгущенка', 'ананас', 'говядина', 
'соль', 'рыба вяленая', 'масло подсолнечное', 'яблоки', 
'груши', 'лепешка', 'молоко', 'курица', 'лаваш', 'вафли', 'мандарины']

Также при расчёте величины НДС по каждому товару округляйте значения до двух знаков после запятой.
При расчёте выручки по-прежнему будем считать, что оплата за заказ поступает сразу же после его оформления, т.е. случаи, когда заказ был оформлен в один день, а оплата получена на следующий, возникнуть не могут.
Также помните, что не все заказы были оплачены — некоторые были отменены пользователями.

Решение:
with five_ordered_couriers as (SELECT time :: date as date,
                                      count(courier_id) as five_time_courier
                               FROM   (SELECT time :: date,
                                              courier_id
                                       FROM   courier_actions
                                       WHERE  action = 'deliver_order'
                                       GROUP BY time :: date, courier_id having count(courier_id) > 4) as t1
                               GROUP BY time :: date), complect_order as (SELECT time :: date as date,
                                                  count(order_id) as orders_count
                                           FROM   user_actions
                                           WHERE  order_id not in (SELECT order_id
                                                                   FROM   user_actions
                                                                   WHERE  action = 'cancel_order')
                                           GROUP BY time :: date), count_deliver_order as (SELECT time :: date as date,
                                                       count(courier_id) as deliver_orders
                                                FROM   courier_actions
                                                WHERE  action = 'deliver_order'
                                                GROUP BY time :: date), multipliers as (SELECT time :: date as date,
                                               case when extract(month
                                        FROM   time) = 8 then 400 else 500 end as bonus_pay, case when extract(month
                                        FROM   time) = 8 then 140 else 115 end as complect_pay, 150 as one_deliver_pay, case when extract(month
                                        FROM   time) = 8 then 120000 else 150000 end as month_rent
                                        FROM   user_actions
                                        GROUP BY time :: date, bonus_pay, complect_pay, month_rent)
SELECT t1.date,
       t1.revenue,
       t2.costs,
       t3.tax,
       t1.revenue - (t2.costs + t3.tax) as gross_profit,
       sum(t1.revenue) OVER(ORDER BY t1.date) as total_revenue,
       sum(t2.costs) OVER(ORDER BY t1.date) as total_costs,
       sum(t3.tax) OVER(ORDER BY t1.date) as total_tax,
       sum(t1.revenue - (t2.costs + t3.tax)) OVER(ORDER BY t1.date) as total_gross_profit,
       round((t1.revenue - (t2.costs + t3.tax)) :: decimal / t1.revenue * 100,
             2) as gross_profit_ratio,
       round(sum(t1.revenue - (t2.costs + t3.tax)) OVER(ORDER BY t1.date) :: decimal / sum(t1.revenue) OVER(ORDER BY t1.date) * 100,
             2) as total_gross_profit_ratio
FROM   (SELECT creation_time :: date as date,
               sum(price) as revenue
        FROM   (SELECT creation_time,
                       order_id,
                       unnest(product_ids) as product_id
                FROM   orders
                WHERE  order_id not in (SELECT order_id
                                        FROM   user_actions
                                        WHERE  action = 'cancel_order')) as t1
            INNER JOIN (SELECT product_id,
                               price
                        FROM   products) as t2 using(product_id)
        GROUP BY creation_time :: date) as t1
    LEFT JOIN (SELECT complect_order.date as date,
                      ((orders_count * complect_pay) + (deliver_orders * one_deliver_pay) + month_rent + (coalesce(five_time_courier,
                                                                                                                   0) * bonus_pay)) :: decimal as costs
               FROM   complect_order
                   LEFT JOIN count_deliver_order using(date)
                   LEFT JOIN five_ordered_couriers using(date)
                   LEFT JOIN multipliers using(date)) as t2 using(date)
    LEFT JOIN (SELECT t1.creation_time :: date as date,
                      sum(case when t2.name in ('сахар', 'сухарики', 'сушки', 'семечки', 'масло льняное', 'виноград', 'масло оливковое', 'арбуз', 'батон', 'йогурт', 'сливки', 'гречка', 'овсянка', 'макароны', 'баранина', 'апельсины', 'бублики', 'хлеб', 'горох', 'сметана', 'рыба копченая', 'мука', 'шпроты', 'сосиски', 'свинина', 'рис', 'масло кунжутное', 'сгущенка', 'ананас', 'говядина', 'соль', 'рыба вяленая', 'масло подсолнечное', 'яблоки', 'груши', 'лепешка', 'молоко', 'курица', 'лаваш', 'вафли', 'мандарины') then round(price :: decimal / 110 * 10, 2)
                               else round(price :: decimal / 120 * 20, 2) end) as tax
               FROM   (SELECT creation_time,
                              order_id,
                              unnest(product_ids) as product_id
                       FROM   orders
                       WHERE  order_id not in (SELECT order_id
                                               FROM   user_actions
                                               WHERE  action = 'cancel_order')) as t1
                   LEFT JOIN (SELECT product_id,
                                     name,
                                     price
                              FROM   products) as t2 using(product_id)
               GROUP BY t1.creation_time :: date) as t3 using(date)
